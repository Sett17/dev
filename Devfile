***version*t*+VERSION
if [ -z "$DEV_VERSION" ]; then
    echo "VERSION not set"
    exit 1
fi
echo "Setting version to $DEV_VERSION"
echo -e "package global\nconst Version = \"${DEV_VERSION}\"" > global/version.go
gofmt -w global/version.go

git add global/version.go
git commit -m "Bumped version to $DEV_VERSION"
git push

***release*t*+VERSION
if [ -z "$DEV_VERSION" ]; then
    echo "VERSION not set"
    exit 1
fi

go build .
cmd.exe /c go build .

LAST_RELEASE=$(curl -s https://api.github.com/repos/sett17/dev/releases | jq -r 'first.tag_name')
echo "https://github.com/Sett17/dev/compare/${LAST_RELEASE}...${DEV_VERSION}"

gh release create ${DEV_VERSION} -n "https://github.com/Sett17/dev/compare/${LAST_RELEASE}...${DEV_VERSION}" dev dev.exe
rm dev.exe dev

***update*t*
LAST_RELEASE=$(curl -s https://api.github.com/repos/sett17/dev/releases | jq -r 'first.tag_name')
echo "Updating to ${LAST_RELEASE}"

rm -vf $GOPATH/bin/dev
go install github.com/Sett17/dev@${LAST_RELEASE}
echo -e "\e[32mUpdated linux version\e[0m"

cmd.exe /c del /s %userprofile%\\go\\bin\\dev.exe
cmd.exe /c go install github.com/Sett17/dev@${LAST_RELEASE}
echo -e "\e[32mUpdated windows version\e[0m"

***latest*
echo "Last release: $(curl -s https://api.github.com/repos/sett17/dev/releases | jq -r 'first.tag_name')"

***test|desc*t*p*q*
echo moin
sleep 1
echo -e '\e[38;2;186;142;247mdikka \e[0m'
